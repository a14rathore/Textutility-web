{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","Title","type","id","About","onClick","toggleMode","htmlFor","Textform","useState","text","setText","noOfWords","split","length","style","color","Heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","toLowerCase","reword","i","reverse","join","filter","s","defaultProps","App","setDarkMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.388544af.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.Title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">{props.About}</a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <div className={`form-check form-switch mx-4 text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  Title: PropTypes.string.isRequired,\r\n  About: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n  Title: 'Set title here',\r\n  About: 'About Text'\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const handleUpperCase = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  }\r\n  const handleLowerCase = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  }\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  }\r\n  const [text, setText] = useState('');\r\n\r\n  /* \"enter text here \" is default value here and it will store in a text varible \r\n  and whenever we want to update entered text we will call settextfunction.and over page updated without loading of page.*/\r\n  let noOfWords = text.split(\" \").length;\r\n  if (text === \"\") {\r\n    noOfWords = 0;\r\n  }\r\n  const clearText = () => {\r\n    setText(\"\");\r\n  }\r\n  const revWords = () => {\r\n    let newText = text.split(' ');\r\n    let reword =\"\";\r\n    for (let i = 0; i < newText.length; i++) {\r\n      reword = `${newText[i].split('').reverse().join('')}`;\r\n        newText[i]=reword;\r\n    }\r\n    reword=newText.join(' ');\r\n    setText(reword);\r\n  }\r\n  const revText = () => {\r\n    let newText = text.split('').reverse().join('');\r\n    setText(newText);\r\n  }\r\n  const removeWhiteSpace=()=>{\r\n    let newText=text.split(' ').filter(s => s).join(' ');\r\n    setText(newText);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <div className=\"my-3\" >\r\n          < label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\" >\r\n            <h6>{props.Heading}</h6></label>\r\n          <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"7\" value={text}\r\n            onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey',\r\n            color: props.mode==='dark'?'white':'#042743'}}></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpperCase}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-success mx-3\" onClick={handleLowerCase}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-secondary mx-3\" onClick={revWords}>Reverse Words</button>\r\n        <button className=\"btn btn-warning mx-3\" onClick={revText}>Reverse Text</button>\r\n        <button className=\"btn btn-info mx-3\" onClick={removeWhiteSpace}>Remove extra White space</button>\r\n        <button className=\"btn btn-danger mx-3\" onClick={clearText}>Clear</button>\r\n      </div>\r\n      <div className=\"container my-4\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{noOfWords} words and {text.length} Characters</p>\r\n        <p>{0.008 * noOfWords}Minutes to Read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n\r\n  );\r\n}","import AboutUs from \"./Components/AboutUs\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/Textform\";\nimport React, { useState } from 'react'\nfunction App() {\n  const [mode,setDarkMode]=useState('light');\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setDarkMode('dark');\n      document.body.style.backgroundColor='#042743';\n    }else{\n      setDarkMode('light');\n      document.body.style.backgroundColor='white';\n\n    }\n\n  }\n  return (\n    <>\n      <Navbar Title=\"Textutils\" About=\"About Us\" mode={mode} toggleMode={toggleMode}></Navbar>\n      <TextForm Heading=\"Enter Text in below Area\" mode={mode}/>\n      {/* <AboutUs/> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}